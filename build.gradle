plugins {
    id("org.asciidoctor.jvm.convert") version "3.3.0"
    id("com.github.johnrengelman.shadow") version "6.1.0"
    id("io.micronaut.application") version "1.2.0"
    id "com.commercehub.gradle.plugin.avro" version "0.21.0"
}

version = "0.1.8-exp2"
//version = "latest"
group = "org.observertc.webrtc.connector"

apply from: "gradle/asciidoc.gradle"
repositories {
    mavenCentral()
    jcenter()
}

avro {
    createSetters = false
    fieldVisibility = "PRIVATE"
    outputCharacterEncoding = "UTF-8"

}

def generateAvro = tasks.register("generateAvro", com.commercehub.gradle.plugin.avro.GenerateAvroJavaTask) {
    source("src/avro")
    outputDir = file("src/main/java/")
//    outputDir = file("src/dest")
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("org.observertc.webrtc.connector.*")
    }
}

dependencies {
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-management")
    implementation("io.micronaut.micrometer:micronaut-micrometer-core")
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-prometheus")
    implementation("javax.annotation:javax.annotation-api")
//    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.sql:micronaut-jooq")
    implementation("io.micronaut.rxjava3:micronaut-rxjava3")
    implementation("io.micronaut.cache:micronaut-cache-caffeine")
    runtimeOnly("ch.qos.logback:logback-classic")

    // https://mvnrepository.com/artifact/io.projectreactor.kafka/reactor-kafka
    compile group: 'io.projectreactor.kafka', name: 'reactor-kafka', version: '1.3.1'

    compile group: 'org.apache.avro', name: 'avro', version: '1.10.0'
    testImplementation group: 'org.jeasy', name: 'easy-random-core', version: '5.0.0'
    compile 'com.google.cloud:google-cloud-bigquery:1.126.3'

    // https://mvnrepository.com/artifact/org.hibernate/hibernate-validator
    implementation("io.micronaut.beanvalidation:micronaut-hibernate-validator:3.0.0")
// https://mvnrepository.com/artifact/com.amazon.redshift/redshift-jdbc42


    implementation group: 'org.jooq', name: 'jooq', version: '3.14.8'
    compile("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation group: 'com.amazon.redshift', name: 'redshift-jdbc42', version: '2.0.0.3'

    implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.19'

    implementation group: 'org.postgresql', name: 'postgresql', version: '9.3-1100-jdbc4'
//    implementation group: 'com.amazon.redshift', name: 'redshift-jdbc42-no-awssdk', version: '1.2.45.1069'

    testCompile "org.testcontainers:mysql:1.15.2"
    testCompile "org.testcontainers:postgresql:1.15.2"
    testCompile "org.testcontainers:kafka:1.15.1"

//    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.6.7.1'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.2'

    runtimeOnly group: 'com.fasterxml.jackson.module', name: 'jackson-modules-java8', version: '2.10.2', ext: 'pom'
}


application {
    mainClass.set("org.observertc.webrtc.connector.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}


dockerBuild{
    images = ["${System.env.DOCKER_IMAGE}:$project.version"]
}

